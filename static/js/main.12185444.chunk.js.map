{"version":3,"sources":["store/index.ts","utils/idl.ts","components/Multisig.tsx","utils/spl-token.ts","commands/mnde_transfer.ts","components/WalletProvider.tsx","components/Header.tsx","components/Footer.tsx","components/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx","idl/index.ts","components/MultisigProvider.tsx","store/reducer.ts","components/Notification.tsx"],"names":["store","createStore","reducer","IDL_INSTRUCTION_LAYOUT","rustEnum","struct","encodeInstruction","i","buffer","Buffer","alloc","len","encode","concat","IDL_TAG","slice","from","reverse","idlAddress","programId","PublicKey","findProgramAddress","base","createWithSeed","Multisig","multisig","fixed","maxWidth","style","position","bottom","right","display","flexDirection","NewMultisigButton","MultisigInstance","useState","open","setOpen","border","width","height","borderRadius","onClick","NewMultisigDialog","onClose","multisigClient","useMultisig","undefined","multisigAccount","setMultisigAccount","transactions","setTransactions","showSignerDialog","setShowSignerDialog","showAddTransactionDialog","setShowAddTransactionDialog","showExecuted","setShowExecuted","forceRefresh","setForceRefresh","useEffect","account","fetch","then","catch","err","console","error","transaction","all","toBuffer","txs","subscribe","on","marginBottom","marginTop","padding","marginLeft","marginRight","color","textAlign","elevation","variant","flexGrow","component","toString","threshold","owners","length","title","arrow","disablePadding","renderItems","AddTransactionDialog","didAddTransaction","SignerDialog","primary","result","tx","key","publicKey","toBase58","didExecute","push","TxListItem","history","useHistory","enqueueSnackbar","useSnackbar","setThreshold","zeroAddr","default","participants","setParticipants","_onClose","maxParticipantLength","setMaxParticipantLength","disableCreate","createMultisig","provider","wallet","Error","Account","multisigSize","nonce","map","p","rpc","BN","rent","SYSVAR_RENT_PUBKEY","createInstruction","accounts","signers","instructions","action","signature","fullWidth","label","value","type","onChange","e","parseInt","target","idx","justifyContent","disabled","str","sendTransaction","useWallet","txAccount","setTxAccount","txData","fromUint8ArrayToBase64","data","translated","amount","fromTwos","pubkey","MarinadeUSDCAta","units","bn","decimals","n","indexOf","addCommas","withDecPoint","decPointPos","endsWith","removeDecZeroes","s","padStart","l","withDecimalPoint","toStringDecMin","rows","field","wordBreak","background","float","ownerSetSeqno","msAccountRows","owner","approve","ix","instruction","t","Transaction","add","connection","getLatestBlockhashAndContext","minContextSlot","context","slot","blockhash","lastValidBlockHeight","confirmTransaction","execute","multisigSigner","executeTransaction","remainingAccounts","equals","isSigner","isWritable","button","icon","ixLabel","in","timeout","unmountOnExit","errStr","logs","join","align","r","AccountsList","BPF_LOADER_UPGRADEABLE_PID","secondary","coder","sighash","idl","signer","setSigner","addrNonce","paddingBottom","networks","mainnet","multisigUpgradeAuthority","TransferMNDEListItem","ProgramUpdateListItem","IdlUpgradeListItem","MultisigSetOwnersListItem","ChangeThresholdListItem","ChangeThresholdListItemDetails","changeThreshold","changeThresholdData","proposer","createTransaction","paddingLeft","paddingRight","SetOwnersListItemDetails","setOwners","setOwnersData","TransferMNDEListItemDetails","destinationAccount","setDestinationAccount","setAmount","state","getState","transferMNDE","mndeTransferInstruction","common","network","url","splTransferInstruction","independentAccountToStoreMultisigInstruction","txSize","keys","log","message","Number","UpgradeIdlListItemDetails","setProgramId","setBuffer","createTransactionAccount","programAddr","bufferAddr","idlAddr","accs","UpgradeProgramListItemDetails","getAccountInfo","programAccount","programdataAddress","spill","SYSVAR_CLOCK_PUBKEY","web3","getMintClient","anchorProvider","mintAddress","Token","TOKEN_PROGRAM_ID","Keypair","generate","getAssociatedTokenAccountAddress","mint","utils","token","associatedAddress","getTokenAccountInfo","mintClient","getAssociatedTokenAccountAndInstruction","ownerAddress","payerAddress","associatedTokenAccountAddress","createAssociateTokenInstruction","createAssociatedTokenAccountInstruction","ASSOCIATED_TOKEN_PROGRAM_ID","MNDEMintAddress","MNDETreasuryGrill","rpcUrl","signerAuth","destinationAccountString","MNDEMint","fromAccount","includes","fromAccountInfo","address","destAccountInfo","destTokenAccountInfo","destinationATA","computedATA","send","fromMintClient","getMintInfo","fromMintInfo","power","atomsAmount","BigInt","toFixed","createTransferInstruction","WalletConnectionProvider","props","wallets","useMemo","getSolflareWallet","getPhantomWallet","WalletProvider","children","Header","multisigAddress","setMultisigAddress","addr","_","isValidPubkey","searchFn","AppBar","boxShadow","borderBottom","Toolbar","flex","SerumLogoButton","BarButton","hrefClient","backgroundColor","outlineWidth","placeholder","onKeyPress","IconButton","NetworkSelector","UserSelector","WalletConnectButton","Button","alt","src","href","Link","textDecoration","Typography","fontSize","useSelector","dispatch","useDispatch","anchorEl","setAnchorEl","handleClose","currentTarget","Menu","Boolean","Object","MenuItem","ActionType","CommonSetNetwork","item","networkKey","disconnect","Select","displayEmpty","renderValue","overflow","connect","select","connectWallet","selectedWallet","name","CommonWalletDidConnect","id","event","anchorOrigin","vertical","horizontal","transformOrigin","walletItem","Footer","zIndex","borderTop","FooterButton","isEnd","Layout","refresh","setRefresh","minHeight","RiskBar","window","localStorage","getItem","RiskDisclosureForm","onConsent","setItem","MultisigPage","location","hash","defaultMultisig","MultisigInstancePage","path","useLocation","pathname","split","App","theme","createMuiTheme","palette","typography","fontFamily","overrides","CssBaseline","maxSnack","autoHideDuration","MultisigProvider","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","version","isMut","args","vec","defined","kind","fields","types","errors","code","msg","MultisigContext","React","createContext","opts","preflightCommitment","commitment","Connection","Provider","Program","MultisigIdl","multisigProgramId","useContext","initialState","newState","CommonWalletSetProvider","walletProvider","isWalletConnected","CommonWalletDidDisconnect","explorerClusterSuffix","mainnet1","testnet","devnet","localhost","ViewTransactionOnExplorerButton","urlSuffix","rel"],"mappings":"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","file":"static/js/main.12185444.chunk.js","sourcesContent":["import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nexport const store = createStore(reducer);\n","import { struct, Layout } from \"buffer-layout\";\nimport { rustEnum } from \"@project-serum/borsh\";\n\n// Simplified since we only use the SetBuffer variant.\nexport type IdlInstruction =\n  | Create\n  | CreateBuffer\n  | Write\n  | SetBuffer\n  | SetAuthority;\n\ntype Create = {};\ntype CreateBuffer = {};\ntype Write = {};\ntype SetBuffer = {};\ntype SetAuthority = {};\n\nconst IDL_INSTRUCTION_LAYOUT: Layout<IdlInstruction> = rustEnum([\n  struct([], \"create\"),\n  struct([], \"createBuffer\"),\n  struct([], \"write\"),\n  struct([], \"setBuffer\"),\n  struct([], \"setAuthority\"),\n]);\n\nexport function encodeInstruction(i: IdlInstruction): Buffer {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n  const len = IDL_INSTRUCTION_LAYOUT.encode(i, buffer);\n  return Buffer.concat([IDL_TAG, buffer.slice(0, len)]);\n}\n\n// Reverse for little endian.\nexport const IDL_TAG = Buffer.from(\"0a69e9a778bcf440\", \"hex\").reverse();\n","import { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useSnackbar } from \"notistack\";\nimport { fromUint8Array as fromUint8ArrayToBase64 } from \"js-base64\";\nimport Container from \"@material-ui/core/Container\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport GavelIcon from \"@material-ui/icons/Gavel\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport Paper from \"@material-ui/core/Paper\";\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport BuildIcon from \"@material-ui/icons/Build\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ShowIcon from \"@material-ui/icons/RemoveRedEye\";\nimport List from \"@material-ui/core/List\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport BN from \"bn.js\";\nimport {\n  Account,\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { ViewTransactionOnExplorerButton } from \"./Notification\";\nimport * as idl from \"../utils/idl\";\nimport { networks } from \"../store/reducer\";\nimport { useMultisig } from \"./MultisigProvider\";\nimport { AccountBalanceWallet } from \"@material-ui/icons\";\nimport { mndeTransferInstruction } from \"../commands/mnde_transfer\";\nimport { store } from \"../store\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\n// Seed for generating the idlAddress.\nfunction seed(): string {\n  return \"anchor:idl\";\n}\n\n// Deterministic IDL address as a function of the program id.\nasync function idlAddress(programId: PublicKey): Promise<PublicKey> {\n  const base = (await PublicKey.findProgramAddress([], programId))[0];\n  return await PublicKey.createWithSeed(base, seed(), programId);\n}\n\nexport default function Multisig({ multisig }: { multisig?: PublicKey }) {\n  return (\n    <div>\n      <Container fixed maxWidth=\"md\">\n        <div\n          style={{\n            position: \"fixed\",\n            bottom: \"75px\",\n            right: \"75px\",\n            display: \"flex\",\n            flexDirection: \"row-reverse\",\n          }}\n        >\n          <NewMultisigButton />\n        </div>\n      </Container>\n      {multisig && <MultisigInstance multisig={multisig} />}\n    </div>\n  );\n}\n\nfunction NewMultisigButton() {\n  const [open, setOpen] = useState(false);\n  return (\n    <div style={{ display: \"flex\" }}>\n      <IconButton\n        style={{\n          border: \"solid 1pt #ccc\",\n          width: \"60px\",\n          height: \"60px\",\n          borderRadius: \"30px\",\n        }}\n        onClick={() => setOpen(true)}\n      >\n        <AddIcon />\n      </IconButton>\n      <NewMultisigDialog open={open} onClose={() => setOpen(false)} />\n    </div>\n  );\n}\n\nexport function MultisigInstance({ multisig }: { multisig: PublicKey }) {\n  const { multisigClient } = useMultisig();\n  const [multisigAccount, setMultisigAccount] = useState<any>(undefined);\n  const [transactions, setTransactions] = useState<any>(null);\n  const [showSignerDialog, setShowSignerDialog] = useState(false);\n  const [showAddTransactionDialog, setShowAddTransactionDialog] = useState(false);\n  const [showExecuted, setShowExecuted] = useState(false);\n  const [forceRefresh, setForceRefresh] = useState(false);\n  useEffect(() => {\n    multisigClient?.account.multisig\n      .fetch(multisig)\n      .then((account: any) => {\n        setMultisigAccount(account);\n      })\n      .catch((err: any) => {\n        console.error(err);\n        setMultisigAccount(null);\n      });\n  }, [multisig, multisigClient?.account]);\n  useEffect(() => {\n    multisigClient?.account.transaction.all(multisig.toBuffer()).then((txs) => {\n      setTransactions(txs);\n    });\n  }, [multisigClient?.account.transaction, multisig, forceRefresh]);\n  useEffect(() => {\n    multisigClient?.account.multisig\n      .subscribe(multisig)\n      .on(\"change\", (account) => {\n        setMultisigAccount(account);\n      });\n  }, [multisigClient, multisig]);\n  return (\n    <Container fixed maxWidth=\"md\" style={{ marginBottom: \"16px\" }}>\n      <div>\n        <Card style={{ marginTop: \"24px\" }}>\n          {multisigAccount === undefined ? (\n            <div style={{ padding: \"16px\" }}>\n              <CircularProgress\n                style={{\n                  display: \"block\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                }}\n              />\n            </div>\n          ) : multisigAccount === null ? (\n            <CardContent>\n              <Typography\n                color=\"textSecondary\"\n                style={{\n                  padding: \"24px\",\n                  textAlign: \"center\",\n                }}\n              >\n                Multisig not found\n              </Typography>\n            </CardContent>\n          ) : (\n            <></>\n          )}\n        </Card>\n        {multisigAccount && (\n          <Paper>\n            <AppBar\n              style={{ marginTop: \"24px\" }}\n              position=\"static\"\n              color=\"default\"\n              elevation={1}\n            >\n              <Toolbar>\n                <Typography variant=\"h6\" style={{ flexGrow: 1 }} component=\"h2\">\n                  {multisig.toString()} | {multisigAccount.threshold.toString()}{\" \"}\n                  of {multisigAccount.owners.length.toString()} Multisig\n                </Typography>\n                <Tooltip title=\"Signer\" arrow>\n                  <IconButton onClick={() => setShowSignerDialog(true)}>\n                    <InfoIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Add\" arrow>\n                  <IconButton onClick={() => setShowAddTransactionDialog(true)}>\n                    <AddIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Show/Hide Executed\" arrow>\n                  <IconButton onClick={() => setShowExecuted(!showExecuted)}>\n                    <ShowIcon />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n\n            </AppBar>\n            <List disablePadding>\n              {renderItems(showExecuted, multisig, multisigAccount, transactions)\n                // transactions.map((tx: any) => (\n                //   <TxListItem\n                //     key={tx.publicKey.toString()}\n                //     multisig={multisig}\n                //     multisigAccount={multisigAccount}\n                //     tx={tx}\n                //   />\n                // ))\n              }\n            </List>\n          </Paper>\n        )}\n      </div>\n      <AddTransactionDialog\n        multisig={multisig}\n        open={showAddTransactionDialog}\n        onClose={() => setShowAddTransactionDialog(false)}\n        didAddTransaction={() => setForceRefresh(!forceRefresh)}\n      />\n      {multisigAccount && (\n        <SignerDialog\n          multisig={multisig}\n          multisigAccount={multisigAccount}\n          open={showSignerDialog}\n          onClose={() => setShowSignerDialog(false)}\n        />\n      )}\n    </Container>\n  );\n}\n\ntype MultisigTransaction = {\n  publicKey: PublicKey\n  account: {\n    didExecute: boolean\n  }\n}\n\nfunction renderItems(showExecuted: boolean, multisig: any, multisigAccount: any, transactions: MultisigTransaction[]) {\n  if (transactions === null) {\n    return <div style={{ padding: \"16px\" }}>\n      <CircularProgress\n        style={{\n          display: \"block\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n        }}\n      />\n    </div>\n  }\n  if (transactions.length === 0) {\n    return <ListItem>\n      <ListItemText primary=\"No transactions found\" />\n    </ListItem>\n  }\n  let result = []\n  for (let tx of transactions) {\n    // hardcoded - ignore/hide marinade deprecated txs\n    // TODO - add \"deprecated\" condition to a tx (BE)\n    const key = tx.publicKey.toBase58()\n    if (key !== \"AsaE7fbkmBTbq3MGKNZ15w1eUY9nikzafn7TvNn9ZvQf\"\n      && key !== \"2qito92LRcGsE4wgmxTUdeBhYoDicjEi8CAM3rPbi8cQ\"\n      && key !== \"7F5aEkm5PHDWAEe7WgT12q8Anijkx6gXQq8hATdhV7Rr\"\n    )\n      if (showExecuted || !tx.account.didExecute) {\n        result.push(\n          <TxListItem\n            key={tx.publicKey.toString()}\n            multisig={multisig}\n            multisigAccount={multisigAccount}\n            tx={tx}\n          />)\n      }\n  }\n  return result\n}\n\nexport function NewMultisigDialog({\n  open,\n  onClose,\n}: {\n  open: boolean;\n  onClose: () => void;\n}) {\n  const history = useHistory();\n  const { multisigClient } = useMultisig();\n  const { enqueueSnackbar } = useSnackbar();\n  const [threshold, setThreshold] = useState(2);\n  // @ts-ignore\n  const zeroAddr = PublicKey.default.toString();\n  const [participants, setParticipants] = useState([zeroAddr]);\n  const _onClose = () => {\n    onClose();\n    setThreshold(2);\n    setParticipants([zeroAddr, zeroAddr]);\n  };\n  const [maxParticipantLength, setMaxParticipantLength] = useState(10);\n  const disableCreate = maxParticipantLength < participants.length;\n  const createMultisig = async () => {\n    if (!multisigClient?.provider.wallet.publicKey)\n      throw Error(\"Wallet not connected\");\n    enqueueSnackbar(\"Creating multisig\", {\n      variant: \"info\",\n    });\n    const multisig = new Account();\n    // Disc. + threshold + nonce.\n    const baseSize = 8 + 8 + 1 + 4;\n    // Add enough for 2 more participants, in case the user changes one's\n    /// mind later.\n    const fudge = 64;\n    // Can only grow the participant set by 2x the initialized value.\n    const ownerSize = maxParticipantLength * 32 + 8;\n    const multisigSize = baseSize + ownerSize + fudge;\n    const [, nonce] = await PublicKey.findProgramAddress(\n      [multisig.publicKey.toBuffer()],\n      multisigClient.programId\n    );\n    const owners = participants.map((p) => new PublicKey(p));\n    const tx = await multisigClient.rpc.createMultisig(\n      owners,\n      new BN(threshold),\n      nonce,\n      {\n        accounts: {\n          multisig: multisig.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [multisig],\n        instructions: [\n          await multisigClient.account.multisig.createInstruction(\n            multisig,\n            // @ts-ignore\n            multisigSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(`Multisig created: ${multisig.publicKey.toString()}`, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    _onClose();\n    history.push(`/${multisig.publicKey.toString()}`);\n  };\n  return (\n    <Dialog fullWidth open={open} onClose={_onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Multisig\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <TextField\n          fullWidth\n          label=\"Threshold\"\n          value={threshold}\n          type=\"number\"\n          onChange={(e) => setThreshold(parseInt(e.target.value) as number)}\n        />\n        <TextField\n          fullWidth\n          label=\"Max Number of Participants (cannot grow the owner set past this)\"\n          value={maxParticipantLength}\n          type=\"number\"\n          onChange={(e) =>\n            setMaxParticipantLength(parseInt(e.target.value) as number)\n          }\n        />\n        {participants.map((p, idx) => (\n          <TextField\n            key={p}\n            fullWidth\n            label=\"Participant\"\n            value={p}\n            onChange={(e) => {\n              const p = [...participants];\n              p[idx] = e.target.value;\n              setParticipants(p);\n            }}\n          />\n        ))}\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <IconButton\n            onClick={() => {\n              const p = [...participants];\n              // @ts-ignore\n              p.push(new PublicKey(\"11111111111111111111111111111111\").toString());\n              setParticipants(p);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={_onClose}>Cancel</Button>\n        <Button\n          disabled={disableCreate}\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"primary\"\n          onClick={() =>\n            createMultisig().catch((err) => {\n              const str = err ? err.toString() : \"\";\n              enqueueSnackbar(`Error creating multisig: ${str}`, {\n                variant: \"error\",\n              });\n            })\n          }\n        >\n          Create\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\n/**\n* Formats a BN with commas and 5,2, or 0 decimal places\n* @param {number} bn \n*/\nexport function toStringDecMin(bn: BN, decimals: number): string {\n  return addCommas(removeDecZeroes(withDecimalPoint(bn, decimals)));\n}\nfunction withDecimalPoint(bn: BN, decimals: number): string {\n  const s = bn.toString().padStart(decimals + 1, '0')\n  const l = s.length\n  return s.slice(0, l - decimals) + '.' + s.slice(-decimals)\n}\n\n/**\n* removes extra zeroes after the decimal point\n* it leaves >4,2, or none (never 3 to not confuse the international user)\n* @param {string} withDecPoint\n*/\nexport function removeDecZeroes(withDecPoint: string): string {\n  let decPointPos = withDecPoint.indexOf('.')\n  if (decPointPos <= 0) return withDecPoint;\n  let decimals = withDecPoint.length - decPointPos - 1;\n  while (withDecPoint.endsWith(\"0\") && decimals-- > 4) withDecPoint = withDecPoint.slice(0, -1);\n  if (withDecPoint.endsWith(\"00\")) withDecPoint = withDecPoint.slice(0, -2)\n  if (withDecPoint.endsWith(\".00\")) withDecPoint = withDecPoint.slice(0, -3)\n  return withDecPoint;\n}\n/**\n * adds commas to a string number \n * @param {string} str \n */\nexport function addCommas(str: string) {\n  let n = str.indexOf(\".\")\n  if (n === -1) n = str.length\n  n -= 4\n  while (n >= 0) {\n    str = str.slice(0, n + 1) + \",\" + str.slice(n + 1)\n    n = n - 3\n  }\n  return str;\n}\n\n\nfunction TxListItem({\n  multisig,\n  multisigAccount,\n  tx,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  tx: any;\n}) {\n  const { enqueueSnackbar } = useSnackbar();\n  const { multisigClient } = useMultisig();\n  const { sendTransaction } = useWallet();\n  const [open, setOpen] = useState(false);\n  const [txAccount, setTxAccount] = useState(tx.account);\n  useEffect(() => {\n    multisigClient?.account.transaction\n      .subscribe(tx.publicKey)\n      .on(\"change\", (account) => {\n        setTxAccount(account);\n      });\n  }, [multisigClient, multisig, tx.publicKey]);\n\n  let txData = fromUint8ArrayToBase64(txAccount.data)\n  let translated = \"\";\n  if (txAccount.programId.toString() === \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\" &&\n    txAccount.data[0] === 3 // 3=>SPL-Token-Transfer\n  ) {\n    let slice = txAccount.data.slice(1, 9);\n    let amount = new BN(slice, 'le').fromTwos(64);\n    // marinade patch - until we move to SPL-gov\n    const from = txAccount.accounts[0].pubkey.toBase58()\n    const MarinadeUSDCAta = \"9vKwu77KUVgmAYrB96PPMHrZtnvJXs9aKzFxfa71gDTX\"\n    const decimals = from === MarinadeUSDCAta ? 6 : 9\n    const units = from === MarinadeUSDCAta ? \" USDC\" : \"\"\n    translated = \"Transfer \" + toStringDecMin(amount, decimals) + units + \" from \" + from + \" to \" + txAccount.accounts[1].pubkey.toBase58();\n  }\n  // TODO - include Marinade.IDL and decode instruction Data\n  /*else if (txAccount.programId.toString() === \"MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD\" &&\n    txData.startsWith(\"QwMicr\")) {\n    translated = \"Marinade\"\n    let slice = txAccount.data.slice(8, 8 + 3);\n    let bn = new BN(slice, 'le').fromTwos(64);\n    translated = bn.toString()\n  }\n  */\n\n  const rows = [\n    {\n      field: \"Decoded\",\n      value: translated,\n    },\n    {\n      field: \"Program ID\",\n      value: txAccount.programId.toString(),\n    },\n    {\n      field: \"Did execute\",\n      value: txAccount.didExecute.toString(),\n    },\n    {\n      field: \"Instruction data\",\n      value: (\n        <code\n          style={{\n            wordBreak: \"break-word\",\n            width: \"370px\",\n            background: \"black\",\n            color: \"#ffffff\",\n            float: \"right\",\n            textAlign: \"left\",\n          }}\n        >\n          {txData}\n        </code>\n      ),\n    },\n    {\n      field: \"Multisig\",\n      value: txAccount.multisig.toString(),\n    },\n    {\n      field: \"Transaction account\",\n      value: tx.publicKey.toString(),\n    },\n    {\n      field: \"Owner set seqno\",\n      value: txAccount.ownerSetSeqno.toString(),\n    },\n  ];\n  const msAccountRows = multisigAccount.owners.map(\n    (owner: PublicKey, idx: number) => {\n      return {\n        field: owner.toString(),\n        value: txAccount.signers[idx] ? <CheckIcon /> : <RemoveIcon />,\n      };\n    }\n  );\n  const approve = async () => {\n    if (!multisigClient?.provider.wallet.publicKey)\n      throw Error(\"Wallet not connected\");\n    enqueueSnackbar(\"Approving transaction\", {\n      variant: \"info\",\n    });\n    const ix = multisigClient.instruction.approve({\n      accounts: {\n        multisig,\n        transaction: tx.publicKey,\n        owner: multisigClient.provider.wallet.publicKey,\n      },\n    });\n    const t = new Transaction();\n    t.add(ix);\n    const {\n      context: { slot: minContextSlot },\n      value: { blockhash, lastValidBlockHeight },\n    } = await multisigClient.provider.connection.getLatestBlockhashAndContext();\n\n    const signature = await sendTransaction(\n      t,\n      multisigClient.provider.connection,\n      { minContextSlot }\n    );\n\n    await multisigClient.provider.connection.confirmTransaction({\n      blockhash,\n      lastValidBlockHeight,\n      signature,\n    });\n    enqueueSnackbar(\"Transaction approved\", {\n      variant: \"success\",\n    });\n  };\n  const execute = async () => {\n    enqueueSnackbar(\"Executing transaction\", {\n      variant: \"info\",\n    });\n    if (!multisigClient?.provider.wallet.publicKey)\n      throw Error(\"Wallet not connected\");\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const ix = multisigClient.instruction.executeTransaction({\n      accounts: {\n        multisig,\n        multisigSigner,\n        transaction: tx.publicKey,\n      },\n      remainingAccounts: txAccount.accounts\n        .map((t: any) => {\n          if (t.pubkey.equals(multisigSigner)) {\n            return { ...t, isSigner: false };\n          }\n          return t;\n        })\n        .concat({\n          pubkey: txAccount.programId,\n          isWritable: false,\n          isSigner: false,\n        }),\n    });\n    const t = new Transaction();\n    t.add(ix);\n    const {\n      context: { slot: minContextSlot },\n      value: { blockhash, lastValidBlockHeight },\n    } = await multisigClient.provider.connection.getLatestBlockhashAndContext();\n\n    const signature = await sendTransaction(\n      t,\n      multisigClient.provider.connection,\n      { minContextSlot }\n    );\n\n    await multisigClient.provider.connection.confirmTransaction({\n      blockhash,\n      lastValidBlockHeight,\n      signature,\n    });\n    enqueueSnackbar(\"Transaction executed\", {\n      variant: \"success\",\n    });\n  };\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)}>\n        <ListItemIcon>{icon(tx, multisigClient)}</ListItemIcon>\n        {ixLabel(tx, multisigClient)}\n        {txAccount.didExecute && (\n          <CheckCircleIcon style={{ marginRight: \"16px\" }} />\n        )}\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <div style={{ background: \"#ececec\", padding: \"10px\" }}>\n          <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n            <Button\n              style={{ marginRight: \"10px\" }}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() =>\n                approve().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString();\n                  }\n                  enqueueSnackbar(`Unable to approve transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Approve\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() =>\n                execute().catch((err) => {\n                  let errStr = \"\";\n                  if (err) {\n                    errStr = err.toString() + '\\n' + err.logs? err.logs.join('\\n'):\"\" \n                  }\n                  enqueueSnackbar(`Unable to execute transaction: ${errStr}`, {\n                    variant: \"error\",\n                  });\n                })\n              }\n            >\n              Execute\n            </Button>\n          </div>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Transaction Field</TableCell>\n                    <TableCell align=\"right\">Value</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((r) => (\n                    <TableRow>\n                      <TableCell>{r.field}</TableCell>\n                      <TableCell align=\"right\">{r.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Multisig Owner</TableCell>\n                    <TableCell align=\"right\">Did Sign</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {txAccount.ownerSetSeqno === multisigAccount.ownerSetSeqno &&\n                    msAccountRows.map((r: any) => (\n                      <TableRow>\n                        <TableCell>{r.field}</TableCell>\n                        <TableCell align=\"right\">{r.value}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n              {txAccount.ownerSetSeqno !== multisigAccount.ownerSetSeqno && (\n                <div style={{ marginTop: \"16px\" }}>\n                  <Typography\n                    color=\"textSecondary\"\n                    style={{ textAlign: \"center\" }}\n                  >\n                    The owner set has changed since this transaction was created\n                  </Typography>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          <Card style={{ marginTop: \"16px\" }}>\n            <CardContent>\n              <AccountsList accounts={txAccount.accounts} />\n            </CardContent>\n          </Card>\n        </div>\n      </Collapse>\n    </>\n  );\n}\n\nfunction ixLabel(tx: any, multisigClient: any) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    // Upgrade instruction.\n    if (tx.account.data.equals(Buffer.from([3, 0, 0, 0]))) {\n      return (\n        <ListItemText\n          primary=\"Program upgrade\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set threshold\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return (\n        <ListItemText\n          primary=\"Set owners\"\n          secondary={tx.publicKey.toString()}\n        />\n      );\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return (\n      <ListItemText primary=\"Upgrade IDL\" secondary={tx.publicKey.toString()} />\n    );\n  }\n  return <ListItemText primary={tx.publicKey.toString()} />;\n}\n\nfunction AccountsList({ accounts }: { accounts: any }) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Account</TableCell>\n          <TableCell align=\"right\">Writable</TableCell>\n          <TableCell align=\"right\">Signer</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {accounts.map((r: any) => (\n          <TableRow>\n            <TableCell>{r.pubkey.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isWritable.toString()}</TableCell>\n            <TableCell align=\"right\">{r.isSigner.toString()}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n}\n\nfunction SignerDialog({\n  multisig,\n  multisigAccount,\n  open,\n  onClose,\n}: {\n  multisig: PublicKey;\n  multisigAccount: any;\n  open: boolean;\n  onClose: () => void;\n}) {\n  const { multisigClient } = useMultisig();\n  const [signer, setSigner] = useState<null | string>(null);\n\n  useEffect(() => {\n    if (multisigClient) {\n      PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      ).then((addrNonce) => setSigner(addrNonce[0].toString()));\n    }\n  }, [multisig, multisigClient, setSigner]);\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          Multisig Info\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        {multisig?.equals(networks.mainnet.multisigUpgradeAuthority!) && (\n          <DialogContentText>\n            This multisig is the upgrade authority for the multisig program\n            itself.\n          </DialogContentText>\n        )}\n        <DialogContentText>\n          <b>Program derived address</b>: {signer}. This is the address one\n          should use as the authority for data governed by the multisig.\n        </DialogContentText>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Owners</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {multisigAccount.owners.map((r: any) => (\n              <TableRow>\n                <TableCell>{r.toString()}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nfunction AddTransactionDialog({\n  multisig,\n  open,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  open: boolean;\n  onClose: () => void;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  return (\n    <Dialog open={open} fullWidth onClose={onClose} maxWidth=\"md\">\n      <DialogTitle>\n        <Typography variant=\"h4\" component=\"h2\">\n          New Transaction\n        </Typography>\n      </DialogTitle>\n      <DialogContent style={{ paddingBottom: \"16px\" }}>\n        <DialogContentText>\n          Create a new transaction to be signed by the multisig. This\n          transaction will not execute until enough owners have signed the\n          transaction.\n        </DialogContentText>\n        <List disablePadding>\n          <TransferMNDEListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ProgramUpdateListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <IdlUpgradeListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <MultisigSetOwnersListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n          <ChangeThresholdListItem\n            didAddTransaction={didAddTransaction}\n            multisig={multisig}\n            onClose={onClose}\n          />\n        </List>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nfunction ChangeThresholdListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <GavelIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Change threshold\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <ChangeThresholdListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction ChangeThresholdListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [threshold, setThreshold] = useState(2);\n  const { multisigClient } = useMultisig();\n  // @ts-ignore\n  const { enqueueSnackbar } = useSnackbar();\n  const changeThreshold = async () => {\n    if (!multisigClient?.provider.wallet.publicKey)\n      throw Error(\"Wallet not connected\");\n    enqueueSnackbar(\"Creating change threshold transaction\", {\n      variant: \"info\",\n    });\n    const data = changeThresholdData(multisigClient, threshold);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 1000; // todo\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Threshold\"\n        value={threshold}\n        type=\"number\"\n        onChange={(e) => {\n          // @ts-ignore\n          setThreshold(e.target.value);\n        }}\n      />\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <Button onClick={() => changeThreshold()}>Change Threshold</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction MultisigSetOwnersListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <SupervisorAccountIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Set owners\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <SetOwnersListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction SetOwnersListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const { multisigClient } = useMultisig();\n  // @ts-ignore\n  const zeroAddr = PublicKey.default.toString();\n  const [participants, setParticipants] = useState([zeroAddr]);\n  const { enqueueSnackbar } = useSnackbar();\n  const setOwners = async () => {\n    if (!multisigClient?.provider.wallet.publicKey)\n      throw Error(\"Wallet not connected\");\n    enqueueSnackbar(\"Creating setOwners transaction\", {\n      variant: \"info\",\n    });\n    const owners = participants.map((p) => new PublicKey(p));\n    const data = setOwnersData(multisigClient, owners);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accounts = [\n      {\n        pubkey: multisig,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: multisigSigner,\n        isWritable: false,\n        isSigner: true,\n      },\n    ];\n    const transaction = new Account();\n    const txSize = 5000; // TODO: tighter bound.\n    const tx = await multisigClient.rpc.createTransaction(\n      multisigClient.programId,\n      accounts,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      {participants.map((p, idx) => (\n        <TextField\n          fullWidth\n          style={{ marginTop: \"16px\" }}\n          label=\"Participant\"\n          value={p}\n          onChange={(e) => {\n            const p = [...participants];\n            p[idx] = e.target.value;\n            setParticipants(p);\n          }}\n        />\n      ))}\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <IconButton\n          onClick={() => {\n            const p = [...participants];\n            // @ts-ignore\n            p.push(new PublicKey(\"11111111111111111111111111111111\").toString());\n            setParticipants(p);\n          }}\n        >\n          <AddIcon />\n        </IconButton>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => setOwners()}>Set Owners</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction TransferMNDEListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <AccountBalanceWallet />\n        </ListItemIcon>\n        <ListItemText primary={\"Transfer MNDE\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <TransferMNDEListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction TransferMNDEListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [destinationAccount, setDestinationAccount] = useState<null | string>(null);\n  const [amount, setAmount] = useState<null | number>(null);\n  const { sendTransaction } = useWallet();\n\n  const state = store.getState()\n\n  const { multisigClient } = useMultisig();\n  const { enqueueSnackbar } = useSnackbar();\n  const transferMNDE = async () => {\n    try {\n      if (!multisigClient?.provider.wallet.publicKey) {\n        throw Error(\"Wallet not connected\");\n      }\n\n      enqueueSnackbar(\"Creating Transfer MNDE transaction\", {\n        variant: \"info\",\n      });\n\n      const [multisigSigner] = await PublicKey.findProgramAddress(\n        [multisig.toBuffer()],\n        multisigClient.programId\n      );\n\n      if (!destinationAccount) throw Error(\"destinationAccount is nothing\")\n      if (!amount || amount <= 0) throw Error(\"amount must be >=0\")\n      const splTransferInstruction = await mndeTransferInstruction(state.common.network.url, multisigClient, multisigSigner, destinationAccount, amount);\n      const independentAccountToStoreMultisigInstruction = new Account();\n      const txSize = 207; // pre-computed\n      const ix = await multisigClient.instruction.createTransaction(\n        splTransferInstruction.programId,\n        splTransferInstruction.keys,\n        splTransferInstruction.data,\n        {\n          accounts: {\n            multisig,\n            transaction: independentAccountToStoreMultisigInstruction.publicKey,\n            proposer: multisigClient.provider.wallet.publicKey,\n            rent: SYSVAR_RENT_PUBKEY,\n          }\n        }\n      );\n\n      const t = new Transaction();\n      t.add(await multisigClient.account.transaction.createInstruction(\n        independentAccountToStoreMultisigInstruction,\n        // @ts-ignore\n        txSize\n      ));\n      t.add(ix);\n      const {\n        context: { slot: minContextSlot },\n        value: { blockhash, lastValidBlockHeight },\n      } = await multisigClient.provider.connection.getLatestBlockhashAndContext();\n\n      const signature = await sendTransaction(\n        t,\n        multisigClient.provider.connection,\n        {\n          minContextSlot,\n          signers: [independentAccountToStoreMultisigInstruction]\n        }\n      );\n\n      await multisigClient.provider.connection.confirmTransaction({\n        blockhash,\n        lastValidBlockHeight,\n        signature,\n      });\n\n      console.log(destinationAccount, amount);\n      enqueueSnackbar(\"Transaction created\", {\n        variant: \"success\",\n        action: <ViewTransactionOnExplorerButton signature={signature} />,\n      });\n      didAddTransaction(independentAccountToStoreMultisigInstruction.publicKey);\n      onClose();\n    } \n    catch (ex) {\n      enqueueSnackbar(\"Error\", {\n        variant: \"error\",\n        action: ex.message + \"<br>\" + ex.logs? ex.logs.join(\"<br>\"):\"\",\n      });\n    }\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Destination account\"\n        value={destinationAccount}\n        onChange={(e) => setDestinationAccount(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"Amount to transfer\"\n        value={amount}\n        type=\"number\"\n        onChange={(e) => setAmount(Number(e.target.value))}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => transferMNDE()}>\n          Propose MNDE Transfer\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction IdlUpgradeListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <DescriptionIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Upgrade IDL\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeIdlListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nfunction UpgradeIdlListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useMultisig();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    if (!multisigClient?.provider.wallet.publicKey)\n      throw Error(\"Wallet not connected\");\n    enqueueSnackbar(\"Creating transaction\", {\n      variant: \"info\",\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    const idlAddr = await idlAddress(programAddr);\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const data = idl.encodeInstruction({ setBuffer: {} });\n    const accs = [\n      {\n        pubkey: bufferAddr,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: idlAddr, isWritable: true, isSigner: false },\n      { pubkey: multisigSigner, isWritable: true, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      programAddr,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={(e) => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"New IDL buffer\"\n        value={buffer}\n        onChange={(e) => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction ProgramUpdateListItem({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [open, setOpen] = useState(false);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen((open) => !open)}>\n        <ListItemIcon>\n          <BuildIcon />\n        </ListItemIcon>\n        <ListItemText primary={\"Upgrade program\"} />\n        {open ? <ExpandLess /> : <ExpandMore />}\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <UpgradeProgramListItemDetails\n          didAddTransaction={didAddTransaction}\n          multisig={multisig}\n          onClose={onClose}\n        />\n      </Collapse>\n    </>\n  );\n}\n\nconst BPF_LOADER_UPGRADEABLE_PID = new PublicKey(\n  \"BPFLoaderUpgradeab1e11111111111111111111111\"\n);\n\nfunction UpgradeProgramListItemDetails({\n  multisig,\n  onClose,\n  didAddTransaction,\n}: {\n  multisig: PublicKey;\n  onClose: Function;\n  didAddTransaction: (tx: PublicKey) => void;\n}) {\n  const [programId, setProgramId] = useState<null | string>(null);\n  const [buffer, setBuffer] = useState<null | string>(null);\n\n  const { multisigClient } = useMultisig();\n  const { enqueueSnackbar } = useSnackbar();\n  const createTransactionAccount = async () => {\n    if (!multisigClient?.provider.wallet.publicKey)\n      throw Error(\"Wallet not connected\");\n    enqueueSnackbar(\"Creating transaction\", {\n      variant: \"info\",\n    });\n    const programAddr = new PublicKey(programId as string);\n    const bufferAddr = new PublicKey(buffer as string);\n    // Hard code serialization.\n    const data = Buffer.from([3, 0, 0, 0]);\n\n    const programAccount = await (async () => {\n      const programAccount =\n        await multisigClient.provider.connection.getAccountInfo(programAddr);\n      if (programAccount === null) {\n        throw new Error(\"Invalid program ID\");\n      }\n      return {\n        // Hard code deserialization.\n        programdataAddress: new PublicKey(programAccount.data.slice(4)),\n      };\n    })();\n    const spill = multisigClient.provider.wallet.publicKey;\n    const [multisigSigner] = await PublicKey.findProgramAddress(\n      [multisig.toBuffer()],\n      multisigClient.programId\n    );\n    const accs = [\n      {\n        pubkey: programAccount.programdataAddress,\n        isWritable: true,\n        isSigner: false,\n      },\n      { pubkey: programAddr, isWritable: true, isSigner: false },\n      { pubkey: bufferAddr, isWritable: true, isSigner: false },\n      { pubkey: spill, isWritable: true, isSigner: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isWritable: false, isSigner: false },\n      { pubkey: multisigSigner, isWritable: false, isSigner: false },\n    ];\n    const txSize = 1000; // TODO: tighter bound.\n    const transaction = new Account();\n    const tx = await multisigClient.rpc.createTransaction(\n      BPF_LOADER_UPGRADEABLE_PID,\n      accs,\n      data,\n      {\n        accounts: {\n          multisig,\n          transaction: transaction.publicKey,\n          proposer: multisigClient.provider.wallet.publicKey,\n          rent: SYSVAR_RENT_PUBKEY,\n        },\n        signers: [transaction],\n        instructions: [\n          await multisigClient.account.transaction.createInstruction(\n            transaction,\n            // @ts-ignore\n            txSize\n          ),\n        ],\n      }\n    );\n    enqueueSnackbar(\"Transaction created\", {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n    didAddTransaction(transaction.publicKey);\n    onClose();\n  };\n\n  return (\n    <div\n      style={{\n        background: \"#f1f0f0\",\n        paddingLeft: \"24px\",\n        paddingRight: \"24px\",\n      }}\n    >\n      <TextField\n        fullWidth\n        style={{ marginTop: \"16px\" }}\n        label=\"Program ID\"\n        value={programId}\n        onChange={(e) => setProgramId(e.target.value as string)}\n      />\n      <TextField\n        style={{ marginTop: \"16px\" }}\n        fullWidth\n        label=\"New program buffer\"\n        value={buffer}\n        onChange={(e) => setBuffer(e.target.value as string)}\n      />\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          marginTop: \"16px\",\n          paddingBottom: \"16px\",\n        }}\n      >\n        <Button onClick={() => createTransactionAccount()}>\n          Create upgrade\n        </Button>\n      </div>\n    </div>\n  );\n}\n\n// @ts-ignore\nfunction icon(tx, multisigClient) {\n  if (tx.account.programId.equals(BPF_LOADER_UPGRADEABLE_PID)) {\n    return <BuildIcon />;\n  }\n  if (tx.account.programId.equals(multisigClient.programId)) {\n    const setThresholdSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"change_threshold\"\n    );\n    if (setThresholdSighash.equals(tx.account.data.slice(0, 8))) {\n      return <GavelIcon />;\n    }\n    const setOwnersSighash = multisigClient.coder.sighash(\n      \"global\",\n      \"set_owners\"\n    );\n    if (setOwnersSighash.equals(tx.account.data.slice(0, 8))) {\n      return <SupervisorAccountIcon />;\n    }\n  }\n  if (idl.IDL_TAG.equals(tx.account.data.slice(0, 8))) {\n    return <DescriptionIcon />;\n  }\n  return <ReceiptIcon />;\n}\n\n// @ts-ignore\nfunction changeThresholdData(multisigClient, threshold) {\n  return multisigClient.coder.instruction.encode(\"change_threshold\", {\n    threshold: new BN(threshold),\n  });\n}\n\n// @ts-ignore\nfunction setOwnersData(multisigClient, owners) {\n  return multisigClient.coder.instruction.encode(\"set_owners\", {\n    owners,\n  });\n}\n","import { BN, Provider, utils, web3 } from '@project-serum/anchor'\nimport { AccountInfo, ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token'\n\nexport const SYSTEM_PROGRAM_ID = new web3.PublicKey('11111111111111111111111111111111')\nexport const STAKE_PROGRAM_ID = new web3.PublicKey('Stake11111111111111111111111111111111111111')\nexport const U64_MAX = new BN('ffffffffffffffff', 16)\n\nexport function web3PubKeyOrNull(value: ConstructorParameters<typeof web3.PublicKey>[0] | null): web3.PublicKey | null {\n  return value === null ? null : new web3.PublicKey(value)\n}\n\nexport function BNOrNull(value: ConstructorParameters<typeof BN>[0] | null): BN | null {\n  return value === null ? null : new BN(value)\n}\n\nexport function getMintClient(anchorProvider: Provider, mintAddress: web3.PublicKey): Token {\n  return new Token(anchorProvider.connection, mintAddress, TOKEN_PROGRAM_ID, web3.Keypair.generate())\n}\n\nexport async function getAssociatedTokenAccountAddress(mint: web3.PublicKey, owner: web3.PublicKey): Promise<web3.PublicKey> {\n  return utils.token.associatedAddress({ mint, owner })\n}\n\nexport async function getTokenAccountInfo(mintClient: Token, publicKey: web3.PublicKey): Promise<AccountInfo> {\n  return mintClient.getAccountInfo(publicKey)\n}\n\nexport async function getAssociatedTokenAccountAndInstruction(anchorProvider: Provider, mintAddress: web3.PublicKey, ownerAddress: web3.PublicKey, payerAddress?: web3.PublicKey): Promise<{\n  associatedTokenAccountAddress: web3.PublicKey\n  createAssociateTokenInstruction: web3.TransactionInstruction | null\n}> {\n  const associatedTokenAccountAddress = await getAssociatedTokenAccountAddress(mintAddress, ownerAddress)\n  let createAssociateTokenInstruction: web3.TransactionInstruction | null = null\n\n  const mintClient = getMintClient(anchorProvider, mintAddress)\n\n  try {\n    await getTokenAccountInfo(mintClient, associatedTokenAccountAddress)\n  } catch (err) {\n    if (!(err instanceof Error) || err.message !== 'Failed to find account') {\n      throw err\n    }\n\n    createAssociateTokenInstruction = Token.createAssociatedTokenAccountInstruction(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      mintAddress,\n      associatedTokenAccountAddress,\n      ownerAddress,\n      payerAddress ?? ownerAddress,\n    )\n  }\n\n  return {\n    associatedTokenAccountAddress,\n    createAssociateTokenInstruction,\n  }\n}\n","import { Program } from \"@project-serum/anchor\";\nimport { getAssociatedTokenAccountAndInstruction, getMintClient, getTokenAccountInfo } from \"../utils/spl-token\";\nimport { PublicKey, Transaction, TransactionInstruction } from \"@solana/web3.js\";\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token'\n\nexport const MNDEMintAddress = new PublicKey(\"MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey\")\nexport const MNDETreasuryGrill = new PublicKey(\"GR1LBT4cU89cJWE74CP6BsJTf2kriQ9TX59tbDsfxgSi\")\n\nexport async function mndeTransferInstruction(\n        rpcUrl:string, \n        multisigClient: Program, \n        signerAuth: PublicKey, \n        destinationAccountString: string, \n        amount: number): Promise<TransactionInstruction> {\n\n    const destinationAccount = new PublicKey(destinationAccountString)\n\n    const MNDEMint = getMintClient(multisigClient.provider, MNDEMintAddress)\n\n    // check from-account (code ready to implement other SPL-tokens)\n    const fromAccount =  rpcUrl.includes(\"devnet\")? new PublicKey(\"MnDaY5b8hVYTE24ujFC2qHLDPcLzEetNyhFVbr9mFb1\") : MNDETreasuryGrill;\n    let fromAccountInfo;\n    try {\n        fromAccountInfo = await getTokenAccountInfo(MNDEMint, MNDETreasuryGrill)\n    }\n    catch (ex) {\n        throw Error(ex.message + \" \" + MNDETreasuryGrill.toBase58())\n    }\n\n    const fromAccountMintAddress = fromAccountInfo.mint\n    if (!fromAccountMintAddress.equals(MNDEMintAddress)) {\n        throw Error(\"From account mint should be MNDE\")\n    }\n    // check from-account owner is multisig auth\n    if (!fromAccountInfo.owner.equals(signerAuth)) {\n        throw Error(\n            `From Token-account.owner ${fromAccountInfo.address.toBase58()} is ${fromAccountInfo.owner.toBase58()} but multisig auth is ${signerAuth.toBase58()}`\n        );\n    }\n\n    // check destination account\n    const destAccountInfo = await multisigClient.provider.connection.getAccountInfo(destinationAccount)\n    if (!destAccountInfo) throw Error(`cannot read account ${destinationAccount.toBase58()}`)\n\n    let destinationATA: PublicKey;\n    // is destination account a token account?\n    if (destAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n        // verify the mint\n        const destTokenAccountInfo = await getTokenAccountInfo(MNDEMint, destinationAccount)\n        if (destTokenAccountInfo.mint !== MNDEMintAddress) {\n            throw Error(`destination account should be a MNDE token account, but mint is ${destTokenAccountInfo.mint.toBase58()}`)\n        }\n        destinationATA = destinationAccount\n    }\n    else {\n        // consider it is a main account, find/create ATA\n        const { associatedTokenAccountAddress: computedATA, createAssociateTokenInstruction } = \n            await getAssociatedTokenAccountAndInstruction(multisigClient.provider, MNDEMintAddress, destinationAccount, multisigClient.provider.wallet.publicKey)\n        if (createAssociateTokenInstruction) {\n            // ATA does not exists, create it now\n            const tx = new Transaction()\n            tx.add(createAssociateTokenInstruction)\n            try {\n                await multisigClient.provider.send(tx)\n            }\n            catch (ex) {\n                throw Error(`${ex.message} creating MNDE ATA for destination account`)\n            }\n        }\n        destinationATA = computedATA\n    }\n\n    // get fromMintClient\n    const fromMintClient = getMintClient(multisigClient.provider, MNDEMintAddress)\n    const fromMintInfo = await fromMintClient.getMintInfo()\n\n    // convert from units to atoms (akin to SOL to lamports)\n    let power = 10 ** fromMintInfo.decimals;\n    let atomsAmount: BigInt = BigInt((amount * power).toFixed(0));\n\n    // create the SPL-Token transfer instruction\n    let instruction = Token.createTransferInstruction(\n        TOKEN_PROGRAM_ID,\n        fromAccount,\n        destinationATA,\n        signerAuth,\n        [],\n        Number(atomsAmount.toString())\n    );\n    // let instruction = Token.createTransferCheckedInstruction(\n    //     TOKEN_PROGRAM_ID,\n    //     fromAccount,\n    //     fromAccountMintAddress,\n    //     destinationATA,\n    //     signerAuth,\n    //     [],\n    //     Number(atomsAmount.toString()),\n    //     fromMintInfo.decimals\n    // );\n\n    return instruction\n}\n\n","import { WalletProvider } from \"@solana/wallet-adapter-react\";\nimport { getPhantomWallet, getSolflareWallet } from \"@solana/wallet-adapter-wallets\";\nimport type { PropsWithChildren, ReactElement, ReactNode } from \"react\";\nimport { useMemo } from \"react\";\n\nexport default function WalletConnectionProvider(\n  props: PropsWithChildren<ReactNode>\n): ReactElement {\n\n  const wallets = useMemo(\n    () => [\n      getSolflareWallet(),\n      getPhantomWallet(),\n    ],\n    []\n  );\n\n  return (\n    <WalletProvider wallets={wallets}>\n      {props.children}\n    </WalletProvider>\n  );\n};\n","import { useState, ReactElement } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Select from \"@material-ui/core/Select\";\nimport Menu from \"@material-ui/core/Menu\";\nimport Link from \"@material-ui/core/Link\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport Button from \"@material-ui/core/Button\";\nimport BubbleChartIcon from \"@material-ui/icons/BubbleChart\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { networks, State as StoreState, ActionType } from \"../store/reducer\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { Wallet } from \"@solana/wallet-adapter-wallets\";\n\nexport default function Header() {\n  const { publicKey } = useWallet();\n  const history = useHistory();\n  const [multisigAddress, setMultisigAddress] = useState(\"\");\n  const disabled = !isValidPubkey(multisigAddress);\n  const searchFn = () => {\n    history.push(`/${multisigAddress}`);\n  };\n  return (\n    <AppBar\n      position=\"static\"\n      style={{\n        background: \"#ffffff\",\n        color: \"#272727\",\n        boxShadow: \"none\",\n        borderBottom: \"solid 1pt #ccc\",\n      }}\n    >\n      <Toolbar>\n        <div\n          style={{\n            display: \"flex\",\n            width: \"100%\",\n          }}\n        >\n          <div style={{ display: \"flex\", flex: 1 }}>\n            <SerumLogoButton />\n            <BarButton label=\"Multisig UI\" hrefClient=\"/\" />\n            <BarButton label=\"Treasury\" hrefClient=\"/9aN4drMhmd8AX3eRdYvH1gbZiPmwgGJfjvneCECF97HD\" />\n            <BarButton label=\"Admin\" hrefClient=\"/7mSA2bgzmUCi4wh16NQEfT76XMqJULni6sheZRCjcyx7\" />\n            <div\n              style={{\n                marginLeft: \"16px\",\n                marginRight: \"16px\",\n                borderRadius: \"25px\",\n                display: \"flex\",\n                flex: 1,\n                backgroundColor: \"rgb(245 245 245)\",\n              }}\n            >\n              <input\n                style={{\n                  flex: 1,\n                  background: \"none\",\n                  padding: \"16px\",\n                  border: \"none\",\n                  outlineWidth: 0,\n                  color: \"inherit\",\n                }}\n                placeholder=\"Search a multisig address...\"\n                value={multisigAddress}\n                onChange={(e) => setMultisigAddress(e.target.value as string)}\n                onKeyPress={(e) => {\n                  if (e.key === \"Enter\") {\n                    searchFn();\n                  }\n                }}\n              />\n              <IconButton disabled={disabled} onClick={searchFn}>\n                <SearchIcon />\n              </IconButton>\n            </div>\n          </div>\n          <div\n            style={{\n              display: \"flex\",\n            }}\n          >\n            <NetworkSelector />\n            {!publicKey ? (\n              <WalletConnectButton\n                style={{\n                  display: publicKey ? \"none\" : \"\",\n                }}\n              />\n            ) : (\n              <UserSelector />\n            )}\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nfunction SerumLogoButton() {\n  const history = useHistory();\n  return (\n    <div style={{ display: \"flex\" }} onClick={() => history.push(\"/\")}>\n      <Button color=\"inherit\">\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n          }}\n        >\n          <img\n            style={{\n              display: \"block\",\n              height: \"35px\",\n            }}\n            alt=\"Logo\"\n            src=\"marinade-logo.avif\"\n          />\n        </div>\n      </Button>\n    </div>\n  );\n}\n\ntype BarButtonProps = {\n  label: string;\n  hrefClient?: string;\n  href?: string;\n};\n\nfunction BarButton(props: BarButtonProps) {\n  const history = useHistory();\n  const { label, href, hrefClient } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n      }}\n      onClick={() => hrefClient && history.push(hrefClient)}\n    >\n      <Link\n        style={{ color: \"inherit\", textDecoration: \"none\" }}\n        href={href}\n        target=\"_blank\"\n      >\n        <Button color=\"inherit\">\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography style={{ fontSize: \"15px\" }}>{label}</Typography>\n          </div>\n        </Button>\n      </Link>\n    </div>\n  );\n}\n\nfunction NetworkSelector() {\n  const network = useSelector((state: StoreState) => {\n    return state.common.network;\n  });\n  const dispatch = useDispatch();\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div\n      style={{\n        marginRight: \"10px\",\n        fontSize: \"15px\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n      }}\n    >\n      <Button\n        color=\"inherit\"\n        onClick={(e) =>\n          setAnchorEl(\n            // @ts-ignore\n            e.currentTarget\n          )\n        }\n      >\n        <BubbleChartIcon />\n        <Typography style={{ marginLeft: \"5px\", fontSize: \"15px\" }}>\n          {network.label}\n        </Typography>\n      </Button>\n      <Menu\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n        style={{\n          marginLeft: \"12px\",\n          color: \"white\",\n        }}\n      >\n        {Object.keys(networks).map((n: string) => (\n          <MenuItem\n            key={n}\n            onClick={() => {\n              handleClose();\n              dispatch({\n                type: ActionType.CommonSetNetwork,\n                item: {\n                  network: networks[n],\n                  networkKey: n,\n                },\n              });\n            }}\n          >\n            <Typography>{networks[n].label}</Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n\nfunction UserSelector() {\n  const { publicKey, disconnect } = useWallet();\n\n  return (\n    <Select\n      displayEmpty\n      renderValue={() => {\n        return (\n          <Typography style={{ overflow: \"hidden\" }}>\n            {publicKey?.toString()}\n          </Typography>\n        );\n      }}\n      style={{\n        marginLeft: \"12px\",\n        width: \"150px\",\n      }}\n      onChange={(e) => {\n        if (e.target.value === \"disconnect\") {\n          disconnect();\n        }\n      }}\n    >\n      <MenuItem value=\"disconnect\">\n        <IconButton color=\"inherit\">\n          <ExitToAppIcon />\n          <Typography style={{ marginLeft: \"15px\" }}>Disconnect</Typography>\n        </IconButton>\n      </MenuItem>\n    </Select>\n  );\n}\n\ntype WalletConnectButtonProps = {\n  style?: any;\n};\n\nexport function WalletConnectButton(\n  props: WalletConnectButtonProps\n): ReactElement {\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const dispatch = useDispatch();\n  const { wallets, connect, disconnect, select } = useWallet();\n\n  const connectWallet = async (selectedWallet: Wallet) => {\n    try {\n      select(selectedWallet.name)\n      await connect();\n      dispatch({\n        type: ActionType.CommonWalletDidConnect,\n        item: {},\n      });\n    } catch (e) {\n      console.log(e);\n      await disconnect();\n    }\n  }\n\n  return (\n    <>\n      <Button\n        id=\"demo-positioned-button\"\n        aria-controls={open ? 'demo-positioned-menu' : undefined}\n        aria-haspopup=\"true\"\n        aria-expanded={open ? 'true' : undefined}\n        onClick={handleClick}\n      >\n        Select wallet\n      </Button>\n      <Menu\n        id=\"demo-positioned-menu\"\n        aria-labelledby=\"demo-positioned-button\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n      >\n        {wallets.map((walletItem, i) => {     \n          return (<MenuItem key={walletItem.name} onClick={() => connectWallet(walletItem)}>{walletItem.name}</MenuItem>) \n        })}\n      </Menu>\n    </>\n  );\n}\n\nfunction isValidPubkey(addr: string): boolean {\n  try {\n    new PublicKey(addr);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nexport default function Footer() {\n  return (\n    <div\n      style={{\n        zIndex: 99,\n        position: \"fixed\",\n        width: \"100%\",\n        bottom: 0,\n        textAlign: \"center\",\n        height: \"30px\",\n        backgroundColor: \"#fbfbfb\",\n        borderTop: \"solid 1pt #ccc\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        paddingLeft: \"10px\",\n        paddingRight: \"10px\",\n      }}\n    >\n      <div style={{ marginLeft: \"auto\", marginRight: \"auto\", display: \"flex\" }}>\n        <FooterButton\n          href={\"https://github.com/project-serum/multisig\"}\n          label={\"Source\"}\n        />\n        <FooterButton\n          href={\"https://github.com/project-serum/awesome-serum\"}\n          label={\"Developer Resources\"}\n        />\n        <FooterButton\n          href={\"https://discord.com/channels/739225212658122886\"}\n          label={\"Discord\"}\n        />\n        <FooterButton href={\"https://t.me/ProjectSerum\"} label={\"Telegram\"} />\n        <FooterButton\n          href={\"https://github.com/project-serum\"}\n          label={\"GitHub\"}\n        />\n        <FooterButton\n          href={\"https://solanabeach.io/\"}\n          label={\"Solana Network\"}\n          isEnd={true}\n        />\n      </div>\n    </div>\n  );\n}\n\ntype FooterButtonProps = {\n  label: string;\n  href: string;\n  isEnd?: boolean;\n};\n\nfunction FooterButton(props: FooterButtonProps) {\n  const { label, href, isEnd } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        marginRight: isEnd ? \"\" : \"15px\",\n      }}\n    >\n      <Link href={href} target=\"_blank\" color=\"inherit\">\n        <Typography style={{ fontSize: \"14px\" }}>{label}</Typography>\n      </Link>\n    </div>\n  );\n}\n","import React, { useState, PropsWithChildren } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\ntype Props = {};\n\nexport default function Layout(props: PropsWithChildren<Props>) {\n  const [refresh, setRefresh] = useState(false);\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        minHeight: \"100vh\",\n        flexDirection: \"column\",\n        backgroundColor: \"rgb(251, 251, 251)\",\n      }}\n    >\n      <div\n        style={{\n          position: \"fixed\",\n          width: \"100%\",\n          zIndex: 99,\n        }}\n      >\n        <RiskBar />\n        <Header />\n      </div>\n      <div\n        style={{\n          width: \"100%\",\n          marginTop: \"94px\",\n          flex: 1,\n          display: \"flex\",\n          marginBottom: \"30px\", // Compensates for the fixed position footer.\n        }}\n      >\n        {window.localStorage.getItem(\"consent\") ? (\n          <div style={{ width: \"100%\" }}>{props.children}</div>\n        ) : (\n          <RiskDisclosureForm\n            onConsent={() => {\n              window.localStorage.setItem(\"consent\", \"true\");\n              setRefresh(!refresh);\n            }}\n          />\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nfunction RiskBar() {\n  return (\n    <div\n      style={{\n        color: \"#fff\",\n        backgroundColor: \"rgb(39, 39, 39)\",\n        height: \"30px\",\n        textAlign: \"center\",\n      }}\n    >\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          height: \"100%\",\n        }}\n      >\n        <Typography style={{ fontSize: \"14px\" }}>\n          Multisig is unaudited software. Use at your own risk.\n        </Typography>\n      </div>\n    </div>\n  );\n}\n\nfunction RiskDisclosureForm({ onConsent }: { onConsent: () => void }) {\n  return (\n    <div\n      style={{\n        flex: \"1\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        textAlign: \"center\",\n      }}\n    >\n      <div style={{ width: \"100%\", display: \"flex\" }}>\n        <div\n          style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}\n        >\n          <Typography\n            style={{ marginBottom: \"16px\", maxWidth: \"1000px\" }}\n            color=\"textSecondary\"\n            variant=\"h4\"\n          >\n            No statement or warranty is provided in relation to the utility of\n            this program, the safety of its code or its suitability for your\n            use, and by using it, you agree to bear any risk associated with\n            such potential vulnerabilities, including, but not limited to the\n            potential loss of tokens.\n          </Typography>\n        </div>\n      </div>\n      <div style={{ display: \"flex\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n        <Button variant=\"contained\" color=\"primary\" onClick={onConsent}>\n          I agree\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Provider } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { unstable_createMuiStrictModeTheme as createMuiTheme } from \"@material-ui/core/styles\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { store } from \"./store\";\nimport WalletConnectionProvider from \"./components/WalletProvider\";\nimport Layout from \"./components/Layout\";\nimport Multisig from \"./components/Multisig\";\nimport MultisigProvider from \"./components/MultisigProvider\";\nimport { SnackbarProvider } from \"notistack\";\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      background: {\n        default: \"rgb(255,255,255)\",\n      },\n    },\n    typography: {\n      fontFamily: [\"Source Sans Pro\", \"sans-serif\"].join(\",\"),\n    },\n    overrides: {},\n  });\n  return (\n    <Provider store={store}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n          <WalletConnectionProvider>\n            <MultisigProvider>\n              <HashRouter basename={\"/\"}>\n                <Layout>\n                  <Route exact path=\"/\" component={MultisigPage} />\n                  <Route\n                    exact\n                    path=\"/:address\"\n                    component={MultisigInstancePage}\n                  />\n                </Layout>\n              </HashRouter>\n            </MultisigProvider>\n          </WalletConnectionProvider>\n        </SnackbarProvider>\n      </MuiThemeProvider>\n    </Provider>\n  );\n}\n\nfunction MultisigPage() {\n  const state = store.getState()\n  const { hash } = window.location;\n  if (hash) {\n    window.location.href = `#/${state.common.network.defaultMultisig!.toString()}`;\n  }\n  const multisig = state.common.network.defaultMultisig;\n  return <Multisig multisig={multisig} />;\n}\n\nexport function MultisigInstancePage() {\n  const history = useHistory();\n  const location = useLocation();\n  const path = location.pathname.split(\"/\");\n  if (path.length !== 2) {\n    history.push(`/multisig`);\n    return <></>;\n  } else {\n    const multisig = new PublicKey(path[1]);\n    return <Multisig multisig={multisig} />;\n  }\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { Idl } from \"@project-serum/anchor\";\n\nconst idl: Idl = {\n  version: \"0.0.0\",\n  name: \"multisig\",\n  instructions: [\n    {\n      name: \"createMultisig\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n        {\n          name: \"nonce\",\n          type: \"u8\",\n        },\n      ],\n    },\n    {\n      name: \"createTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"proposer\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"pid\",\n          type: \"publicKey\",\n        },\n        {\n          name: \"accs\",\n          type: {\n            vec: {\n              defined: \"TransactionAccount\",\n            },\n          },\n        },\n        {\n          name: \"data\",\n          type: \"bytes\",\n        },\n      ],\n    },\n    {\n      name: \"approve\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"owner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setOwners\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"owners\",\n          type: {\n            vec: \"publicKey\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"changeThreshold\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: \"threshold\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"executeTransaction\",\n      accounts: [\n        {\n          name: \"multisig\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"multisigSigner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"transaction\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"Multisig\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"owners\",\n            type: {\n              vec: \"publicKey\",\n            },\n          },\n          {\n            name: \"threshold\",\n            type: \"u64\",\n          },\n          {\n            name: \"nonce\",\n            type: \"u8\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Transaction\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"multisig\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"programId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"accounts\",\n            type: {\n              vec: {\n                defined: \"TransactionAccount\",\n              },\n            },\n          },\n          {\n            name: \"data\",\n            type: \"bytes\",\n          },\n          {\n            name: \"signers\",\n            type: {\n              vec: \"bool\",\n            },\n          },\n          {\n            name: \"didExecute\",\n            type: \"bool\",\n          },\n          {\n            name: \"ownerSetSeqno\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"TransactionAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"pubkey\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"isSigner\",\n            type: \"bool\",\n          },\n          {\n            name: \"isWritable\",\n            type: \"bool\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 100,\n      name: \"InvalidOwner\",\n      msg: \"The given owner is not part of this multisig.\",\n    },\n    {\n      code: 101,\n      name: \"NotEnoughSigners\",\n      msg: \"Not enough owners signed this transaction.\",\n    },\n    {\n      code: 102,\n      name: \"TransactionAlreadySigned\",\n      msg: \"Cannot delete a transaction that has been signed by an owner.\",\n    },\n    {\n      code: 103,\n      name: \"Overflow\",\n      msg: \"Overflow when adding.\",\n    },\n    {\n      code: 104,\n      name: \"UnableToDelete\",\n      msg: \"Cannot delete a transaction the owner did not create.\",\n    },\n    {\n      code: 105,\n      name: \"AlreadyExecuted\",\n      msg: \"The given transaction has already been executed.\",\n    },\n    {\n      code: 106,\n      name: \"InvalidThreshold\",\n      msg: \"Threshold must be less than or equal to the number of owners.\",\n    },\n  ],\n};\n\nexport default idl;\n","import React, {\n  PropsWithChildren,\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n} from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Connection, ConfirmOptions } from \"@solana/web3.js\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Program } from \"@project-serum/anchor\";\nimport { State as StoreState } from \"../store/reducer\";\nimport MultisigIdl from \"../idl\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\nconst MultisigContext = React.createContext<MultisigContextValues>({\n  multisigClient: null\n});\n\ntype MultisigContextValues = {\n  multisigClient: Program | null;\n};\n\nexport default function MultisigProvider(\n  props: PropsWithChildren<ReactNode>\n): ReactElement {\n  const { network } = useSelector((state: StoreState) => {\n    return {\n      network: state.common.network,\n    };\n  });\n  const wallet = useWallet();\n\n  const { multisigClient } = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const connection = new Connection(network.url, opts.preflightCommitment);\n    const provider = new Provider(connection, wallet as any, opts);\n\n    const multisigClient = new Program(\n      MultisigIdl,\n      network.multisigProgramId,\n      provider\n    );\n\n    return {\n      multisigClient,\n    };\n  }, [wallet, network]);\n\n  return (\n    <MultisigContext.Provider value={{ multisigClient }}>\n      {props.children}\n    </MultisigContext.Provider>\n  );\n}\n\nexport function useMultisig(): MultisigContextValues {\n  return useContext(MultisigContext);\n}","import { PublicKey } from \"@solana/web3.js\";\n\nexport type Action = {\n  type: ActionType;\n  item: any;\n};\n\nexport enum ActionType {\n  CommonTriggerShutdown,\n  CommonDidShutdown,\n  CommonWalletDidConnect,\n  CommonWalletDidDisconnect,\n  CommonWalletSetProvider,\n  CommonSetNetwork,\n}\n\nexport default function reducer(\n  state: State = initialState,\n  action: Action\n): State {\n  let newState = {\n    common: { ...state.common },\n  };\n  switch (action.type) {\n    case ActionType.CommonWalletSetProvider:\n      newState.common.walletProvider = action.item.walletProvider;\n      return newState;\n    case ActionType.CommonWalletDidConnect:\n      newState.common.isWalletConnected = true;\n      return newState;\n    case ActionType.CommonWalletDidDisconnect:\n      newState.common.isWalletConnected = false;\n      return newState;\n    case ActionType.CommonSetNetwork:\n      if (newState.common.network.label !== action.item.network.label) {\n        newState.common.network = action.item.network;\n      }\n      return newState;\n    default:\n      return newState;\n  }\n}\n\nexport type State = {\n  common: CommonState;\n};\n\nexport type CommonState = {\n  walletProvider?: string;\n  isWalletConnected: boolean;\n  network: Network;\n};\n\nexport const networks: Networks = {\n  mainnet: {\n    // Cluster.\n    label: \"marinade.rpcpool.com\",\n    url: \"https://marinade.rpcpool.com\",\n    explorerClusterSuffix: \"\",\n    multisigProgramId: new PublicKey(\n      \"H88LfRBiJLZ7wYkHGuwkKTaijfQxexq8JvzUndu7fyjL\"\n    ),\n    multisigUpgradeAuthority: new PublicKey(\n      \"EYpNb3zURb2C9TuVexxV5kf5mwsDc5ziSJJKyKF2wJTW\"\n    ),\n    defaultMultisig: new PublicKey(\n      \"9aN4drMhmd8AX3eRdYvH1gbZiPmwgGJfjvneCECF97HD\" // multisig-4 treasury\n      // \"7mSA2bgzmUCi4wh16NQEfT76XMqJULni6sheZRCjcyx7\" // multisig-3 admin\n    ),\n  },\n  mainnet1: {\n    // Cluster.\n    label: \"Mainnet Beta\",\n    url: \"https://marinade.rpcpool.com\",\n    explorerClusterSuffix: \"\",\n    multisigProgramId: new PublicKey(\n      \"H88LfRBiJLZ7wYkHGuwkKTaijfQxexq8JvzUndu7fyjL\"\n    ),\n    multisigUpgradeAuthority: new PublicKey(\n      \"EYpNb3zURb2C9TuVexxV5kf5mwsDc5ziSJJKyKF2wJTW\"\n    ),\n    defaultMultisig: new PublicKey(\n      \"9aN4drMhmd8AX3eRdYvH1gbZiPmwgGJfjvneCECF97HD\" // multisig-4 treasury\n      // \"7mSA2bgzmUCi4wh16NQEfT76XMqJULni6sheZRCjcyx7\" // multisig-3 admin\n    ),\n  },\n  testnet: {\n    // Cluster.\n    label: \"Testnet\",\n    url: \"https://api.testnet.solana.com\",\n    explorerClusterSuffix: \"devnet\",\n    multisigProgramId: new PublicKey(\n      \"H88LfRBiJLZ7wYkHGuwkKTaijfQxexq8JvzUndu7fyjL\"\n      //\"A6ZR2g7UiGobEr2YkRxd1HSbc5PoKMnyDGAKh2JkWgMg\"\n    ),\n    multisigUpgradeAuthority: new PublicKey(\n      \"EYpNb3zURb2C9TuVexxV5kf5mwsDc5ziSJJKyKF2wJTW\"\n    ),\n    defaultMultisig: new PublicKey(\n      \"7mSA2bgzmUCi4wh16NQEfT76XMqJULni6sheZRCjcyx7\" // multisig-3 admin\n      //\"EYpNb3zURb2C9TuVexxV5kf5mwsDc5ziSJJKyKF2wJTW\" // multisig-1 upgrade multisig\n      //\"6FhtU8Q9bbuhKeRDFL7H7NeMxa1EqL5KP7HU9XRGSyRy\" // multisig-2 upgrade marinade\n      //\"7mSA2bgzmUCi4wh16NQEfT76XMqJULni6sheZRCjcyx7\" // multisig-3 admin\n      //\"9aN4drMhmd8AX3eRdYvH1gbZiPmwgGJfjvneCECF97HD\" // multisig-4 treasury\n    ),\n  },\n  devnet: {\n    // Cluster.\n    label: \"Devnet\",\n    url: \"https://api.devnet.solana.com\",\n    explorerClusterSuffix: \"devnet\",\n    multisigProgramId: new PublicKey(\n      \"H88LfRBiJLZ7wYkHGuwkKTaijfQxexq8JvzUndu7fyjL\"\n    ),\n  },\n  // Fill in with your local cluster addresses.\n  localhost: {\n    // Cluster.\n    label: \"Localhost\",\n    url: \"http://localhost:8899\",\n    explorerClusterSuffix: \"localhost\",\n    multisigProgramId: new PublicKey(\n      \"H88LfRBiJLZ7wYkHGuwkKTaijfQxexq8JvzUndu7fyjL\"\n    ),\n  },\n};\n\nexport const initialState: State = {\n  common: {\n    isWalletConnected: false,\n    walletProvider: \"https://www.sollet.io\",\n    network: networks.mainnet,\n  },\n};\n\ntype Networks = { [label: string]: Network };\n\nexport type Network = {\n  // Cluster.\n  label: string;\n  url: string;\n  explorerClusterSuffix: string;\n  multisigProgramId: PublicKey;\n  defaultMultisig?: PublicKey;\n  multisigUpgradeAuthority?: PublicKey;\n};\n","import { useSelector } from \"react-redux\";\nimport Button from \"@material-ui/core/Button\";\nimport { TransactionSignature } from \"@solana/web3.js\";\nimport { State as StoreState } from \"../store/reducer\";\n\ntype Props = {\n  signature: string;\n};\n\nexport async function withTx(\n  snack: any,\n  beforeLabel: string,\n  afterLabel: string,\n  execTx: () => Promise<TransactionSignature>\n) {\n  snack.enqueueSnackbar(beforeLabel, {\n    variant: \"info\",\n  });\n  try {\n    let tx = await execTx();\n    snack.closeSnackbar();\n    snack.enqueueSnackbar(afterLabel, {\n      variant: \"success\",\n      action: <ViewTransactionOnExplorerButton signature={tx} />,\n    });\n  } catch (err) {\n    snack.enqueueSnackbar(`Error: ${(err as Error).message}`, {\n      variant: \"error\",\n    });\n  }\n}\n\nexport function ViewTransactionOnExplorerButton(props: Props) {\n  const { signature } = props;\n  const { explorerClusterSuffix } = useSelector((state: StoreState) => {\n    return {\n      explorerClusterSuffix: state.common.network.explorerClusterSuffix,\n    };\n  });\n  const urlSuffix = `?cluster=${explorerClusterSuffix}`;\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://explorer.solana.com/tx/${signature}` + urlSuffix}\n    >\n      View on Solana Explorer\n    </Button>\n  );\n}\n"],"sourceRoot":""}